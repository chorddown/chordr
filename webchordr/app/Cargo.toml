[package]
name = "webchordr"
version = "0.2.1"
authors = ["Daniel Corn <info@cundd.net>"]
edition = "2018"
license = "MIT OR Apache-2.0"
readme = "../README.md"
repository = "https://github.com/chorddown/chordr"
description = """
Chorddown web application - Client side
"""
#
#[lib]
#name = "webchordlib"
#crate-type = ["cdylib", "rlib"]

[features]
trunk_build = []

[dependencies]
log = "0.4"
serde = "1"
serde_derive = "1"
serde_json = "1.0.53"
libchordr = { path = "../../libchordr" }
webchordr-common = { path = "../common" }
webchordr-events = { path = "../events" }
webchordr-song-list = { path = "../song-list" }
webchordr-song-browser = { path = "../song-browser" }
webchordr-persistence = { path = "../persistence" }
yew = "0.18"
yew-router = "0.15"
percent-encoding = "2.1.0"
wee_alloc = "0.4.5"
wasm-logger = "0.2"
js-sys = "0.3.44"
wasm-bindgen-futures = "0.4.17"
async-trait = "0.1.51"
chrono = { version = "*", features = ["serde", "wasmbind"] }
base64 = "^0.13.0"
unicode-segmentation = "1.8.0"
# Require a current version of lexical-core
#lexical-core = "^0.7.6"

[dev-dependencies]
wasm-bindgen-test = "0.3"

[build-dependencies]
chrono = { version = "*" }

[dependencies.wasm-bindgen]
version = "0.2.67"
features = ["serde-serialize"]

[dependencies.web-sys]
version = "0.3.44"
features = [
    'KeyboardEvent',
    'HtmlElement',
    'Document',
    'HtmlDocument',
    'Url',
    'DateTimeValue',
    'Window',
    'Location',
    'Headers',
    'Request',
    'RequestInit',
    'RequestMode',
    'RequestCredentials',
    'Response',
    'Storage',
    'History',
    'Navigator',
]

[package.metadata.wasm-pack.profile.dev]
# Should `wasm-opt` be used to further optimize the wasm binary generated after
# the Rust compiler has finished? Using `wasm-opt` can often further decrease
# binary size or do clever tricks that haven't made their way into LLVM yet.
#
# Configuration is set to `false` by default for the dev profile, but it can
# be set to an array of strings which are explicit arguments to pass to
# `wasm-opt`. For example `['-Os']` would optimize for size while `['-O4']`
# would execute very expensive optimizations passes
wasm-opt = false

[package.metadata.wasm-pack.profile.release]
# Should `wasm-opt` be used to further optimize the wasm binary generated after
# the Rust compiler has finished? Using `wasm-opt` can often further decrease
# binary size or do clever tricks that haven't made their way into LLVM yet.
#
# Configuration is set to `false` by default for the dev profile, but it can
# be set to an array of strings which are explicit arguments to pass to
# `wasm-opt`. For example `['-Os']` would optimize for size while `['-O4']`
# would execute very expensive optimizations passes
wasm-opt = ['-Os']

[package.metadata.wasm-pack.profile.dev.wasm-bindgen]
# Should we enable wasm-bindgen's debug assertions in its generated JS glue?
#debug-js-glue = true
# Should wasm-bindgen demangle the symbols in the "name" custom section?
demangle-name-section = true
# Should we emit the DWARF debug info custom sections?
dwarf-debug-info = true
