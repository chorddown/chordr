@import "prelude";
@import "variables-apply";

@page {
    size: auto;   //* auto is the initial value */
    //margin: 0mm;  //* this affects the margin in the printer settings */
}

#chordr {
    font-family: $font;
    font-size: var(--font-size-base);

    line-height: $line-height;
    letter-spacing: 0.05em;
    background: var(--background);
    color: var(--text-color);

    //@include if-dark-mode {
    //    background: $dark-mode-background;
    //    color: $dark-mode-text-color;
    //}

    @media print {
        font-size: $font-size-print;
    }

    *,
    *::before,
    *::after {
        box-sizing: border-box;
        margin: 0;
    }

    main {
        padding: $std-space;

        @media print {
            padding: 0;
        }
    }

    h1,
    h2,
    h3 {
        line-height: 1.3em;
    }

    h1 {
        font-size: $font-size-h1;
        margin-bottom: $std-space;
    }

    h2 {
        font-size: $font-size-h2;
        margin-bottom: $std-half * .5;
    }

    h3 {
        font-size: $font-size-h3;
    }

    span {
        display: inline;
        white-space: pre;
    }

    table {
        padding: 0;
        border-collapse: collapse;

        th,
        td {
            padding: 0;
            vertical-align: bottom;
        }
    }

    .chordr-line {
        padding-top: $line-height;
        display: block;
    }

    .chordr-chord {
        @include apply-styles($chord);
        @include if-dark-mode {
            @include apply-styles($chord-dark);
        }
    }

    .text-row {
        white-space: pre;

        span {
            position: relative;
            background: var(--background);

            &:not(.-last-in-line)::after {
                $combinator: "-" !default;
                // Em dash: $combinator: "â€”" !default;
                content: $combinator;
                position: absolute;
            }
        }

        &.-word-boundary span::after {
            content: normal;
        }
    }

    .col {
        float: left;

        &:last-child::after {
            content: ' ';
            display: block;
            clear: both
        }
    }

    blockquote {
        margin: $std-half 0;
        @include apply-styles($blockquote);
        @include if-dark-mode {
            @include apply-styles($blockquote-dark);
        }
    }

    section {
        margin: $std-space 0;
        clear: both;
        page-break-inside: avoid;
        @if $section-border-length == 100% {
            border-bottom: $section-border;
        } @else {
            &::after {
                display: block;
                content: "";
                width: $section-border-length;
                border-bottom: $section-border;
                position: relative;
                clear: both;
                margin-top: -$section-border-width;
            }
        }

        border-bottom-color: var(--section-border-color);
        //@include if-dark-mode {
        //    border-bottom-color: $dark-mode-section-border-color;
        //}

        &:first-child {
            margin-top: 0;
        }

        &.chorus {
            @include apply-styles($chorus);
            @include if-dark-mode {
                @include apply-styles($chorus-dark);
            }
        }

        // Not implemented
        //&.verse {
        //    @include apply-styles($verse);
        //    @include if-dark-mode {
        //        @include apply-styles($verse-dark);
        //    }
        //}

        &.bridge {
            @include apply-styles($bridge);
            @include if-dark-mode {
                @include apply-styles($bridge-dark);
            }
        }
    }

    hr {
        clear: both;
        border: none;
    }
}
